name: Security Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *' # 매일 자정에 실행

jobs:
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run npm audit
        run: npm audit
        
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
          
      - name: Run OWASP Dependency Check
        uses: sburris/dependency-check-action@master
        with:
          Project-Name: 'snap-codex-scheduler'
          Source-Location: '.'
          Report-Format: 'HTML'
          Report-Location: './reports'
          
      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: reports/
          
      - name: Notify on security issues
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Security Scan Failed',
              body: 'Security scan detected vulnerabilities. Please check the security report artifact.',
              labels: ['security']
            })
            
      - name: Check for secrets
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const checkForSecrets = (dir) => {
              const files = fs.readdirSync(dir);
              for (const file of files) {
                const filePath = path.join(dir, file);
                const stat = fs.statSync(filePath);
                
                if (stat.isDirectory()) {
                  checkForSecrets(filePath);
                } else if (file.endsWith('.js') || file.endsWith('.ts') || file.endsWith('.json')) {
                  const content = fs.readFileSync(filePath, 'utf8');
                  if (content.includes('password') || content.includes('secret') || content.includes('token')) {
                    console.warn(`Potential secret found in ${filePath}`);
                  }
                }
              }
            };
            
            checkForSecrets('.'); 